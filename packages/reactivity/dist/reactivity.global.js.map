{"version":3,"file":"reactivity.global.js","sources":["../../shared/src/index.ts","../src/effect.ts","../src/warning.ts","../src/makeMap.ts","../src/baseHandlers.ts","../src/collectionHandlers.ts","../src/reactive.ts","../src/computed.ts","../src/ref.ts"],"sourcesContent":["// 判断传入的数据是否为对象类型\r\nexport const isObject = (val: unknown): val is Record<any, any> => val !== null && typeof val === 'object'\r\n\r\n// 判断是否是一个函数\r\nexport const isFunction = (val: unknown): val is Function => typeof val === 'function'\r\n\r\n// computed要用\r\nexport const NOOP = () => { }\r\n\r\n// 判断数组\r\nexport const isArray = Array.isArray\r\n\r\n// 判断Map\r\nexport const isMap = (val: unknown): val is Map<any, any> => toTypeString(val) === '[object Map]'\r\nexport const objectToString = Object.prototype.toString\r\nexport const toTypeString = (value: unknown): string => objectToString.call(value)\r\n\r\nexport const extend = Object.assign\r\n\r\n// 判断当前访问的key是否是target自身的属性\r\nconst hasOwnProperty = Object.prototype.hasOwnProperty\r\nexport const hasOwn = (\r\n  val: object,\r\n  key: string | symbol\r\n): key is keyof typeof val => hasOwnProperty.call(val, key) // 相当于obj.hasOwnProperty(key)\r\n\r\n\r\nexport const isString = (val: unknown): val is string => typeof val === 'string'\r\n// 判断是否是一个number类型的key\r\nexport const isIntegerKey = (key: unknown) => isString(key) && key !== 'NaN' && key[0] !== '-' && '' + parseInt(key, 10) === key\r\n\r\n\r\n// 判断值是否发生变化 Object.is 比 == 甚至 === 更严格，== 会类型转换，0 -0 ===会相等，而 Object.is 返回false\r\nexport const hasChanged = (value: any, oldValue: any): boolean => !Object.is(value, oldValue)\r\n\r\n\r\nexport const toNumber = (val: any): any => {\r\n  const n = parseFloat(val)\r\n  return isNaN(n) ? val : n\r\n}\r\n\r\nexport const isSymbol = (val: unknown): val is symbol => typeof val === 'symbol'\r\n\r\n\r\nexport const toRawType = (value: unknown): string => {\r\n  // extract \"RawType\" from strings like \"[object RawType]\"\r\n  return toTypeString(value).slice(8, -1)\r\n}","import { TrackOpTypes, TriggerOpTypes } from './operations'\r\nimport { Target } from './reactive'\r\nimport { Dep } from './dep'\r\nimport { isArray, extend, isMap, isIntegerKey, toNumber } from '@vue/shared'\r\n/**\r\n * effect1(()=>{\r\n *    state.name\r\n *    effect2(()=>{\r\n *      state.age\r\n *    })\r\n *    state.slary\r\n * })\r\n * \r\n * effect1 -> name slary\r\n * effect2 -> age\r\n * \r\n * 用栈来处理，存储正确的关系\r\n */\r\nlet effectStack: ReactiveEffect[] = []\r\nexport let activeEffect: ReactiveEffect | undefined\r\n\r\nexport const ITERATE_KEY = Symbol('iterate')\r\nexport const MAP_KEY_ITERATE_KEY = Symbol('Map key iterate')\r\n\r\nexport let shouldTrack = true\r\nconst trackStack: boolean[] = []\r\n\r\nexport function pauseTracking() {\r\n  trackStack.push(shouldTrack)\r\n  shouldTrack = false\r\n}\r\n\r\nexport function resetTracking() {\r\n  const last = trackStack.pop()\r\n  shouldTrack = last === undefined ? true : last\r\n}\r\n\r\nfunction cleanupEffect(effect: ReactiveEffect) {\r\n  // deps 是当前副作用函数身上的一个属性，这个属性中存储了那些object.key收集了当前effect所对应的set集合\r\n  const { deps } = effect // deps -> [set,set]\r\n  if (deps.length) {\r\n    for (let i = 0; i < deps.length; i++) {\r\n      // 重新执行副作用函数的时候，将当前副作用函数从这个 deps 当中删除\r\n      deps[i].delete(effect)\r\n    }\r\n    deps.length = 0\r\n  }\r\n}\r\n\r\nexport class ReactiveEffect<T = any> {\r\n  active = true\r\n  deps: Dep[] = [] // 让 effect 记录他依赖了哪些属性，同时要记录当前属性依赖了哪个effect \r\n  parent: ReactiveEffect | undefined = undefined\r\n\r\n  constructor(\r\n    public fn: () => T,\r\n    public scheduler: any | null = null,\r\n    scope?: any\r\n  ) {\r\n  }\r\n\r\n  run() {\r\n    // 如果不是激活状态\r\n    if (!this.active) {\r\n      return this.fn()\r\n    }\r\n\r\n    /**\r\n     * 防止死循环，比如\r\n     * effect(()=>{\r\n     *    state.name = Math.Romdom()\r\n     * })\r\n     */\r\n\r\n    if (!effectStack.includes(this)) { // 屏蔽同一个effect会多次执行 \r\n      try {\r\n        // 激活状态的话，需要建立属性和依赖的关系\r\n        cleanupEffect(this) // 清空分支切换时遗留的副作用函数\r\n        activeEffect = this;\r\n        effectStack.push(activeEffect)\r\n        return this.fn(); // 访问data的属性，触发getter （依赖收集）\r\n      } finally {\r\n        effectStack.pop() // 嵌套副作用函数执行完毕以后将最里层的副作用函数pop出去\r\n        activeEffect = effectStack[effectStack.length - 1]\r\n      }\r\n    }\r\n  }\r\n\r\n  // 清除依赖关系，可以手动调用stop执行\r\n  stop() {\r\n    if (this.active) // 如果effect是激活的采取将deps上的effect移除\r\n    {\r\n      cleanupEffect(this)\r\n      this.active = false // 关闭当前effect的激活状态\r\n    }\r\n  }\r\n}\r\n\r\ntype KeyToDepMap = Map<any, Dep>\r\nconst targetMap = new WeakMap<any, KeyToDepMap>()\r\n\r\nexport function isTracking() {\r\n  return activeEffect !== undefined\r\n}\r\n\r\n// 追踪 一个属性对应多个effect 多个属性对应一个effect\r\nexport function track(target: object, key: unknown, type?: TrackOpTypes) {\r\n  // 判断这个 state.name 访问属性的操作是不是在 effect 中执行的，简单来说就是判断需不需要收集\r\n  if (!isTracking() || !shouldTrack) { //如果这个属性不依赖于 effect 直接跳出\r\n    return\r\n  }\r\n  // 根据 target 从 '桶' 当中取得depsMap ,他是一个 Map 类型: key -> effetcs\r\n  // 这行代码的含义就是从桶（大桶）当中拿出 target 对象所有字段的副作用函数集合（所有小桶）  \r\n  let depsMap = targetMap.get(target)\r\n\r\n  //如果当前target对象还没有它的大桶，就创建大桶\r\n  if (!depsMap) {\r\n    depsMap = new Map()\r\n    targetMap.set(target, depsMap)\r\n  }\r\n\r\n  //这行代码的含义是，如果当前target对象有桶（大桶），那么从所有字段的副作用函数集合（所有小桶）中，取出当前key的副作用函数集合（小桶）\r\n  let dep = depsMap.get(key)\r\n\r\n  if (!dep) {\r\n    // 创建当前字段装副作用函数的小桶\r\n    dep = new Set()\r\n    depsMap.set(key, dep)\r\n  }\r\n\r\n  trackEffects(dep)\r\n}\r\n\r\nexport function trackEffects(dep: Dep) {\r\n  // 判断当前的副作用函数是否已经被收集过，收集过就不用再收集了，虽然set可以过滤重复的，但还是有效率问题\r\n  let shouldTrack = !dep.has(activeEffect)\r\n\r\n  // 如果是内层的effect 我们可以将之前的先清空掉\r\n  // if (effectStack.length === 1) {\r\n  //   dep.clear()\r\n  // }\r\n\r\n  if (shouldTrack) {\r\n    dep.add(activeEffect)\r\n    activeEffect.deps.push(dep) // 副作用函数保存自己被哪些 target.key 所收集\r\n  }\r\n}\r\n\r\n/**\r\n * @param target {Target }     \r\n * @param key   { string | number | symbol }\r\n * @param type  { TriggerOpTypes }  触发更新的操作，修改，删除，新增\r\n * @param newValue  { unknown }  用于修改 arr.length = xxx 的时候，此时的 key == 'length' 而 newValue 就是修改的长度的值 \r\n * @returns \r\n */\r\nexport function trigger(target: object, key?: unknown, type?: TriggerOpTypes, newValue?: unknown) {\r\n  // 设置新的值以后，取出当前target所对应的大桶\r\n  const depsMap = targetMap.get(target)\r\n\r\n  // 如果没有大桶直接返回,表明属性没有依赖任何的effect\r\n  if (!depsMap)\r\n    return;\r\n\r\n  let deps: (Dep | undefined)[] = [] // [set,set]\r\n\r\n  // 如果修改 arr.length，将索引大于等于 newValue(修改length的值) 的副作用函数取出来执行\r\n  if (key === 'length' && isArray(target)) {\r\n    const newLength = toNumber(newValue)\r\n    depsMap.forEach((dep, key) => {\r\n      if (key === 'length' || key >= newLength) {\r\n        deps.push(dep)\r\n      }\r\n    })\r\n  } else {\r\n    // 执行 target key 的副作用函数\r\n    if (key !== void 0) {\r\n      // 这里有个问题,就是当前trigger是由于增添属性触发的时候,这里 target key 会获取到 undefined，set在删除属性这里也会拿到undefined，因为set没有get方法，因此没有元素和effect建立依赖关系\r\n      deps.push(depsMap.get(key))\r\n    }\r\n\r\n\r\n    switch (type) {\r\n      // 只有当操作类型为 'ADD' 时，才触发 target 身上 key == ITERATE_KEY 相关联的副作用函数重新执行\r\n      case TriggerOpTypes.ADD:\r\n        // 这里会进行不同的判断,因为保存增添操作所对应的副作用函数的标识符会根据数据类型不同而变化\r\n        if (!isArray(target)) { // 如果增添属性的对象是普对对象,取出for in的副作用函数\r\n          deps.push(depsMap.get(ITERATE_KEY))\r\n          if (isMap(target)) { // // 如果增添属性的对象是Map对象,取出Map所对应的for in副作用函数\r\n            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY))\r\n          }\r\n        }\r\n        /**\r\n         *  这里为什么还需要 isIntergerKey 去判断 key 是否为符合数组的索引类型?\r\n         *    因为 TriggerOpTypes.ADD 只是确认了当前的属性为新增属性,当走到 else if (isIntegerKey(key)) 的时候\r\n         *    只能说明 target 是数组类型,但是不能确保key是不是符合数组的索引属性,因此需要判断一下\r\n         *  */\r\n        else if (isIntegerKey(key)) { // 如果为数组新增元素，应该触发与length相关的副作用函数\r\n          deps.push(depsMap.get('length'))\r\n        }\r\n        break\r\n      // 只有当操作类型为 'DELETE' 时，才触发 target 身上 key == ITERATE_KEY 相关联的副作用函数重新执行\r\n      case TriggerOpTypes.DELETE:\r\n        if (!isArray(target)) {\r\n          deps.push(depsMap.get(ITERATE_KEY))\r\n          if (isMap(target)) {\r\n            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY))\r\n          }\r\n        }\r\n        break\r\n      case TriggerOpTypes.SET:\r\n        if (isMap(target)) {\r\n          deps.push(depsMap.get(ITERATE_KEY))\r\n        }\r\n        break\r\n    }\r\n  }\r\n\r\n\r\n  const effects: ReactiveEffect[] = []\r\n  for (const dep of deps) { // dep -> set\r\n    // 防止当前trigger是由于增添属性触发的时候,上面 deps.push(depsMap.get(key)) 会添加 undefined 到deps里面\r\n    if (dep) {\r\n      effects.push(...dep)\r\n    }\r\n  }\r\n\r\n  triggerEffects(effects)\r\n}\r\n\r\nexport function triggerEffects(dep: Dep | ReactiveEffect[]) {\r\n  // 老问题出现了，因为我们传入的dep是Dep，一个set集合，遍历的时候执行run，run中将当前的effect从dep中删除，但是重新执行又添加进去，导致死循环\r\n  const effects = isArray(dep) ? dep : [...dep]\r\n  for (const effect of effects) {\r\n    // 防止 effect 中同时执行和赋值导致死循环\r\n    if (effect !== activeEffect) {\r\n      if (effect.scheduler) {\r\n        return effect.scheduler()\r\n      }\r\n      effect.run()\r\n    }\r\n  }\r\n}\r\n\r\n// 副作用函数的构造函数\r\nexport function effect<T = any>(fn: () => T, options?: any) {\r\n\r\n  const _effect = new ReactiveEffect(fn) // 这里导致嵌套函数有问题\r\n\r\n  //合并\r\n  if (options) {\r\n    extend(_effect, options)\r\n  }\r\n\r\n  if (!options || !options.lazy) {\r\n    _effect.run() // 默认让fn执行一次\r\n  }\r\n\r\n  const runner = _effect.run.bind(_effect)\r\n  runner.effect = _effect // 给runner添加一个effect属性就是_effect实例\r\n  // runner 可以强制重新执行effect\r\n  return runner\r\n}\r\n\r\nexport interface ReactiveEffectRunner<T = any> {\r\n  (): T\r\n  effect: ReactiveEffect\r\n}\r\n\r\n\r\n\r\n","export function warn(msg: string, ...args: any[]) {\r\n  console.warn(`[Vue warn] ${msg}`, ...args)\r\n}\r\n","/**\r\n * Make a map and return a function for checking if a key\r\n * is in that map.\r\n * IMPORTANT: all calls of this function must be prefixed with\r\n * \\/\\*#\\_\\_PURE\\_\\_\\*\\/\r\n * So that rollup can tree-shake them if necessary.\r\n */\r\nexport function makeMap(\r\n  str: string,\r\n  expectsLowerCase?: boolean\r\n): (key: string) => boolean {\r\n  const map: Record<string, boolean> = Object.create(null)\r\n  const list: Array<string> = str.split(',')\r\n  for (let i = 0; i < list.length; i++) {\r\n    map[list[i]] = true\r\n  }\r\n  return expectsLowerCase ? val => !!map[val.toLowerCase()] : val => !!map[val]\r\n}\r\n","import { reactive, ReactiveFlags, readonly, Target, toRaw } from './reactive'\r\nimport { ITERATE_KEY, pauseTracking, resetTracking, track, trigger } from './effect'\r\nimport { extend, hasChanged, hasOwn, isArray, isIntegerKey, isObject, isSymbol } from '@vue/shared'\r\nimport { TrackOpTypes, TriggerOpTypes } from './operations'\r\nimport { warn } from './warning'\r\nimport { makeMap } from './makeMap'\r\n\r\n\r\nconst arrayInstrumentations = createArrayInstrumentations()\r\n\r\nfunction createArrayInstrumentations() {\r\n  const instrumentations: Record<string, Function> = {};\r\n\r\n  (['includes', 'indexOf', 'lastIndexOf'] as const).forEach(key => {\r\n\r\n    instrumentations[key] = function (this: unknown[], ...args: unknown[]) {\r\n      // 这里的 this 是数组的代理对象，这里通过 toRaw 拿到代理数组的原始数组\r\n      const arr = toRaw(this) as any\r\n      // 实现 includes 访问每个元素，建立依赖关系，不重写其实还会和length建立依赖关系，主要用于在effect中 reactvie(['bar']).includes('bar') ,然后修改 arr[0]='foo',需要重新执行effect\r\n      for (let i = 0, l = this.length; i < l; i++) {\r\n        track(arr, i + '', TrackOpTypes.GET)\r\n      }\r\n      // 现在的 includes 都是拿代理数组的原始数组中的原始元素和传入的参数比较了，之前不重写时，会有一些代理的操作进来，现在更纯粹\r\n      /**\r\n       * 将用户传入的args参数，传递给原始数组对象的 ['includes', 'indexOf', 'lastIndexOf'] 方法，去拿到结果,这一步针对于args不是响应式的。如下：\r\n       * const obj = {};\r\n       * const arr = reactive([obj]);\r\n       * expect(arr.includes(obj)).toBe(true)\r\n       *  */\r\n      const res = arr[key](...args)\r\n      if (res === -1 || res === false) {\r\n        /**\r\n         * 这一步针对于args是响应式的。拿到arr[0]的原始对象如下\r\n         * const obj = {};\r\n         * const arr = reactive([obj]);\r\n         * expect(arr.includes(arr[0])).toBe(true)\r\n         */\r\n        return arr[key](...args.map(toRaw))\r\n      } else {\r\n        return res\r\n      }\r\n    }\r\n  });                                                      \r\n\r\n  (['push', 'pop', 'shift', 'unshift', 'splice'] as const).forEach(key => {\r\n    instrumentations[key] = function (this: unknown[], ...args: unknown[]) {\r\n      // 屏蔽 length 与当前 effect 的依赖关系\r\n      pauseTracking()\r\n      /**\r\n       * 当前的 this 是原始对象的代理对象，因此先 toRaw 获取原始对象的方法，不然就是无线递归了，因为this[key]又是调当前方法了。\r\n       * 这样调用push时，为什么要将方法内部的 this 设置为当前的代理对象呢 ？\r\n       * 因为 push 方法不止访问和设置 length，而且还会触发当前 push 的索引的 setter，比如现在 arr = reactive([obj])只有一个元素，那么\r\n       * 我们 push 的时候就会实现 arr[1] = xxx 的操作，这是一个ADD操作，我们应该取出length相关联的 effect 并执行，而这一切都需要触发setter才行\r\n       * 因此需要将 this 调整为原始数组的代理对象，而我们调用这个方法的时候是通过代理对象调用的，因此this指向的就是代理对象。如果在这里不用apply\r\n       * 调用的话，就是原始数组调用，[obj][1] = xxx ,这不会触发setter，也就不会将 length 相关的effect取出来执行\r\n       */ \r\n      const res = (toRaw(this) as any)[key].apply(this, args)\r\n      resetTracking()\r\n      return res\r\n    }\r\n  })\r\n  return instrumentations\r\n}\r\n\r\nfunction createGetter(isReadonly = false, shallow = false) {\r\n  return function get(target: Target, key: string | symbol, receiver: object) { // 代理对象的本身\r\n    // 如果target已经被代理过了就直接返回true\r\n    if (key === ReactiveFlags.IS_REACTIVE) {\r\n      return !isReadonly\r\n    } else if (key === ReactiveFlags.IS_READONLY) {\r\n      return isReadonly\r\n    } else if (key === ReactiveFlags.IS_SHALLOW) {\r\n      return shallow\r\n    } else if (key === ReactiveFlags.RAW) {\r\n      // 用于获取 receiver 的原始对象\r\n      return target\r\n    }\r\n\r\n    // 判断当前的target是否为数组\r\n    const targetIsArray = isArray(target)\r\n\r\n    /**\r\n     * arr.includes 相当于访问 arr 的 includes 属性，因此在这里可以拦截，返回重写的 includes\r\n     * 首先判断当前的target是否是由 readonly(['foo']) 代理的，如果是 true 这个时候其实走正常逻辑就可以，不需要拦截，因为设置为只读\r\n     * hasOwn(arrayInstrumentations, key) 判断当前的 key 所对应的数组方法是否在重写序列中\r\n     *  */\r\n    if (!isReadonly && targetIsArray && hasOwn(arrayInstrumentations, key)) {\r\n      // recevier 是数组的代理，这里放回重写的方法，并将方法当中的 this 改为 recevier\r\n      return Reflect.get(arrayInstrumentations, key, receiver)\r\n    }\r\n\r\n    const res = Reflect.get(target, key, receiver)\r\n\r\n    // 因为for of 数组的时候，会访问Symbol.iterator，为了不让他和effect建立依赖关系，需要进行判断，并直接返回res\r\n    if (isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {\r\n      return res\r\n    }\r\n\r\n    // 如果不是只读，触发getter收集副作用函数effect\r\n    if (!isReadonly) {\r\n      track(target, key)\r\n    }\r\n\r\n    // 如果是浅层次的读\r\n    if (shallow) {\r\n      return res\r\n    }\r\n\r\n    // 如果返回的对象是对象，判断是否为 readonly ,如果是 readonly 那么递归调用readonly，保证深层次的对象也是只读的，reactive 同理，递归包裹深层次对象成为响应式，可以深层次的实现响应式\r\n    if (isObject(res)) {\r\n      return isReadonly ? readonly(res) : reactive(res)\r\n    }\r\n\r\n    return res\r\n  }\r\n}\r\n\r\nfunction createSetter(shallow = false) {\r\n  return function set(target: object, key: string | symbol, value: unknown, receiver: object) { // receiver是代理对象的本身\r\n    // 拿到旧值,便于触发更新前的比较\r\n    let oldValue = (target as any)[key]\r\n    /**\r\n     *  # hadKey 这一步用来判断当前访问的key,是否是target自身的属性，如果是的话表示当前的set操作是修改数据，反之则是增添属性的操作\r\n     * \r\n     *  # hadKey 这一步其实有2个作用\r\n     *    1.针对数组，判断原始数组是否有这个key\r\n     *        如果当前的原始对象是数组类型，并且key是数字类型，或者字符串的数字类型( 0 or '0')，执行 Number(key) < target.length 判单数组有没有这个key\r\n     *    2.针对对象，判断原始对象是否有这个key\r\n     *        如果当前的原始对象是对象类型，执行 hasOwn(target, key) ，判断自身是否含有key（不包括原型链上的属性）\r\n     */\r\n    const hadKey = isArray(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn(target, key)\r\n\r\n    // 需要先设置值，再去追踪，重新执行副作用函数，否者执行副作用函数的时候值没有发生变化\r\n    const res = Reflect.set(target, key, value, receiver)\r\n\r\n    // 这里判断当前代理对象的原始对象是否为target,防止原型链响应式对象触发 setter 导致重复触发 trigger\r\n    if (target === toRaw(receiver)) {\r\n      // 如果没有访问的key，无论是对于数组还是对象，都是新增属性\r\n      if (!hadKey) {\r\n        trigger(target, key, TriggerOpTypes.ADD, value)\r\n      } else if (hasChanged(value, oldValue)) { // 如果我们修改的属性值和原来的值一样，没必要去更新，影响性能\r\n        trigger(target, key, TriggerOpTypes.SET, value)\r\n      }\r\n    }\r\n    return res\r\n  }\r\n}\r\n\r\n// 'foo' in p \r\nfunction has(target: object, key: string | symbol): boolean {\r\n  const result = Reflect.has(target, key)\r\n  track(target, key)\r\n  return result\r\n}\r\n\r\n// for key in p \r\nfunction ownKeys(target: object): (string | symbol)[] {\r\n  // 判断当前遍历的对象是object类型还是数组类型\r\n  const key = isArray(target) ? 'length' : ITERATE_KEY\r\n  track(target, key, TrackOpTypes.ITERATE)\r\n  return Reflect.ownKeys(target)\r\n}\r\n\r\n// 删除属性的时候触发\r\nfunction deleteProperty(target: object, key: string | symbol): boolean {\r\n  // 判断要删除的属性是否存在当前的target身上\r\n  const hadKey = hasOwn(target, key)\r\n\r\n  const result = Reflect.deleteProperty(target, key)\r\n  // 当前 target 存在要删除的属性,并且成功删除了\r\n  if (result && hadKey) {\r\n    trigger(target, key, TriggerOpTypes.DELETE)\r\n  }\r\n  return result\r\n}\r\n\r\n// 深层次响应式模块的Handlers\r\nconst get = createGetter()\r\nconst set = createSetter()\r\n\r\nexport const mutableHandlers: ProxyHandler<object> = {\r\n  get,\r\n  set,\r\n  has,\r\n  ownKeys,\r\n  deleteProperty\r\n}\r\n\r\n// 浅层次响应式模块的Handlers\r\nconst shallowGet = createGetter(false, true)\r\nconst shallowSet = createSetter(true)\r\n\r\nexport const shallowReactiveHandlers = extend(\r\n  {},\r\n  mutableHandlers,\r\n  // 用 shallowReactiveHandlers 覆盖 mutableHandlers 当中的 get 和 set ，其余继承\r\n  {\r\n    get: shallowGet,\r\n    set: shallowSet\r\n  }\r\n)\r\n\r\n// 只读模块的Handlers\r\nconst readonlyGet = createGetter(true)\r\n\r\nexport const readonlyHandlers: ProxyHandler<object> = {\r\n  get: readonlyGet, // 虽然是只读的，但是也是用reactive层层包裹了的，但是没有track去收集依赖\r\n  set(target, key) {\r\n    warn(\r\n      `Set operation on key \"${String(key)}\" failed: target is readonly.`,\r\n      target\r\n    )\r\n    return true\r\n  },\r\n  deleteProperty(target, key) {\r\n    warn(\r\n      `Delete operation on key \"${String(key)}\" failed: target is readonly.`,\r\n      target\r\n    )\r\n    return true\r\n  }\r\n}\r\n\r\n// 浅只读模块\r\nconst shallowReadonlyGet = createGetter(true, true)\r\nexport const shallowReadonlyHandlers = extend(\r\n  {},\r\n  readonlyHandlers,\r\n  {\r\n    get: shallowReadonlyGet\r\n  }\r\n)\r\n\r\nconst isNonTrackableKeys = /*#__PURE__*/ makeMap(`__proto__,__v_isRef,__isVue`)\r\nconst builtInSymbols = new Set(\r\n  /*#__PURE__*/\r\n  Object.getOwnPropertyNames(Symbol)\r\n    .filter(key => key !== 'arguments' && key !== 'caller')\r\n    .map(key => (Symbol as any)[key])\r\n    .filter(isSymbol)\r\n)\r\n","import { toRaw, ReactiveFlags, toReactive, toReadonly } from './reactive'\r\nimport { track, trigger, ITERATE_KEY, MAP_KEY_ITERATE_KEY } from './effect'\r\nimport { TrackOpTypes, TriggerOpTypes } from './operations'\r\nimport { hasOwn, hasChanged, toRawType, isMap } from '@vue/shared'\r\n\r\nexport type CollectionTypes = IterableCollections | WeakCollections\r\n\r\ntype IterableCollections = Map<any, any> | Set<any>\r\ntype WeakCollections = WeakMap<any, any> | WeakSet<any>\r\ntype MapTypes = Map<any, any> | WeakMap<any, any>\r\ntype SetTypes = Set<any> | WeakSet<any>\r\n\r\nconst toShallow = <T extends unknown>(value: T): T => value\r\n\r\nconst getProto = <T extends CollectionTypes>(v: T): any => Reflect.getPrototypeOf(v)\r\n\r\nfunction get(\r\n  target: MapTypes,\r\n  key: unknown,\r\n  isReadonly = false,\r\n  isShallow = false\r\n) {\r\n  // #1772: readonly(reactive(Map)) should return readonly + reactive version\r\n  // of the value\r\n  target = (target as any)[ReactiveFlags.RAW]\r\n  const rawTarget = toRaw(target)\r\n  const rawKey = toRaw(key)\r\n  if (!isReadonly) {\r\n    if (key !== rawKey) {\r\n      track(rawTarget, key, TrackOpTypes.GET,)\r\n    }\r\n    track(rawTarget, rawKey, TrackOpTypes.GET,)\r\n  }\r\n  const { has } = getProto(rawTarget)\r\n  const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive\r\n  if (has.call(rawTarget, key)) {\r\n    return wrap(target.get(key))\r\n  } else if (has.call(rawTarget, rawKey)) {\r\n    return wrap(target.get(rawKey))\r\n  } else if (target !== rawTarget) {\r\n    // #3602 readonly(reactive(Map))\r\n    // ensure that the nested reactive `Map` can do tracking for itself\r\n    target.get(key)\r\n  }\r\n}\r\n\r\nfunction has(this: CollectionTypes, key: unknown, isReadonly = false): boolean {\r\n  const target = (this as any)[ReactiveFlags.RAW]\r\n  const rawTarget = toRaw(target)\r\n  const rawKey = toRaw(key)\r\n  if (!isReadonly) {\r\n    if (key !== rawKey) {\r\n      track(rawTarget, key, TrackOpTypes.HAS,)\r\n    }\r\n    track(rawTarget, rawKey, TrackOpTypes.HAS,)\r\n  }\r\n  return key === rawKey\r\n    ? target.has(key)\r\n    : target.has(key) || target.has(rawKey)\r\n}\r\n\r\nfunction size(target: IterableCollections, isReadonly = false) {\r\n  // 拿到代理对象的原始集合\r\n  target = (target as any)[ReactiveFlags.RAW]\r\n\r\n  !isReadonly && track(toRaw(target), ITERATE_KEY, TrackOpTypes.ITERATE)\r\n  //  在这里我们将Reflect的第三个值更改为了target，即代理对象的原始集合，因为访问 Set 的 size 属性时，内部会将 S 赋值为this(当前size属性的调用者),然后调用S.[[SetData]]，\r\n  //  如果第三个参数不传入原始集合的话，那么当前 proxy 身上是没有 [[SetData]] 这个内部方法的，因此会报错\r\n  return Reflect.get(target, 'size', target)\r\n}\r\n\r\n\r\n// 新增元素\r\nfunction add(this: SetTypes, value: unknown) {\r\n  // 如果新增的元素是响应式对象，我们给他先处理一下，拿到他的原始对象，将原始对象添加进去\r\n  value = toRaw(value)\r\n  // 还是拿到原始对象\r\n  const target = toRaw(this)\r\n  // 获取原始对象的 has 方法\r\n  const { has } = getProto(target)\r\n  // 判断当前的原始集合中是否含有这个元素，防止重复添加，虽然set有去重功能，但还是有性能的消耗\r\n  const hadKey = has.call(target, value)\r\n  // 如果没有\r\n  if (!hadKey) {\r\n    // 向原始集合中新增元素\r\n    target.add(value)\r\n    // 触发新增元素的trigger，可以将size绑定的副作用函数重新执行\r\n    trigger(target, value, TriggerOpTypes.ADD, value)\r\n  }\r\n  return this\r\n}\r\n\r\nfunction set(this: MapTypes, key: unknown, value: unknown) {\r\n  value = toRaw(value)\r\n  const target = toRaw(this)\r\n  const { has, get } = getProto(target)\r\n\r\n  let hadKey = has.call(target, key)\r\n  if (!hadKey) {\r\n    key = toRaw(key)\r\n    hadKey = has.call(target, key)\r\n  } else if (false) {\r\n    checkIdentityKeys(target, has, key)\r\n  }\r\n\r\n  const oldValue = get.call(target, key)\r\n  target.set(key, value)\r\n  if (!hadKey) {\r\n    trigger(target, key, TriggerOpTypes.ADD, value)\r\n  } else if (hasChanged(value, oldValue)) {\r\n    trigger(target, key, TriggerOpTypes.SET, value)\r\n  }\r\n  return this\r\n}\r\n\r\nfunction deleteEntry(this: CollectionTypes, key: unknown) {\r\n\r\n  // 还是先获取代理对象的原始集合\r\n  const target = toRaw(this)\r\n  // 获取原始集合的 get 和 set 方法\r\n  const { has, get } = getProto(target)\r\n  // 判断集合是否有当前这个值\r\n  let hadKey = has.call(target, key)\r\n  // 如果是 map.delete(map.get(obj))\r\n  // if (!hadKey) {\r\n  //   key = toRaw(key)\r\n  //   hadKey = has.call(target, key)\r\n  // }\r\n\r\n  // 先判断是否能拿到 get 方法，因为set原始对象是没有 get 这个方法的，有 get 方法说明是 target 是 map，调用他的 get 方法获取值\r\n  const oldValue = get ? get.call(target, key) : undefined\r\n\r\n  // 通过原始集合删除这个值（因为只有原始集合内部方法才有[[SetData]]） \r\n  const result = target.delete(key)\r\n\r\n  // 如果有这个值再删除\r\n  if (hadKey) {\r\n    // 需要将 size 收集的依赖拿出来执行\r\n    trigger(target, key, TriggerOpTypes.DELETE, undefined)\r\n  }\r\n  return result\r\n}\r\n\r\n\r\n\r\nfunction createForEach(isReadonly: boolean, isShallow: boolean) {\r\n  return function forEach(\r\n    this: IterableCollections,\r\n    callback: Function,\r\n    thisArg?: unknown\r\n  ) {\r\n    const observed = this as any\r\n    const target = observed[ReactiveFlags.RAW]\r\n    const rawTarget = toRaw(target)\r\n    const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive\r\n    !isReadonly && track(rawTarget, ITERATE_KEY, TrackOpTypes.ITERATE)\r\n    return target.forEach((value: unknown, key: unknown) => {\r\n      // important: make sure the callback is\r\n      // 1. invoked with the reactive map as `this` and 3rd arg\r\n      // 2. the value received should be a corresponding reactive/readonly.\r\n      return callback.call(thisArg, wrap(value), wrap(key), observed)\r\n    })\r\n  }\r\n}\r\n\r\ninterface Iterable {\r\n  [Symbol.iterator](): Iterator\r\n}\r\n\r\ninterface Iterator {\r\n  next(value?: any): IterationResult\r\n}\r\n\r\ninterface IterationResult {\r\n  value: any\r\n  done: boolean\r\n}\r\n\r\nfunction createIterableMethod(\r\n  method: string | symbol,\r\n  isReadonly: boolean,\r\n  isShallow: boolean\r\n) {\r\n\r\n  return function (this: IterableCollections, ...args: unknown[]): Iterable & Iterator {\r\n    const target = (this as any)[ReactiveFlags.RAW]\r\n    const rawTarget = toRaw(target)\r\n    const targetIsMap = isMap(rawTarget)\r\n    const isPair =\r\n      method === 'entries' || (method === Symbol.iterator && targetIsMap)\r\n    const isKeyOnly = method === 'keys' && targetIsMap\r\n    const innerIterator = target[method](...args)\r\n    const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive\r\n    !isReadonly &&\r\n      track(\r\n        rawTarget,\r\n        isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY,\r\n        TrackOpTypes.ITERATE\r\n      )\r\n    // return a wrapped iterator which returns observed versions of the\r\n    // values emitted from the real iterator\r\n    return {\r\n      // iterator protocol\r\n      next() {\r\n        const { value, done } = innerIterator.next()\r\n        return done\r\n          ? { value, done }\r\n          : {\r\n            value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),\r\n            done\r\n          }\r\n      },\r\n      // iterable protocol\r\n      [Symbol.iterator]() {\r\n        return this\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\nfunction createInstrumentations() {\r\n  const mutableInstrumentations: Record<string, Function> = {\r\n    get(this: MapTypes, key: unknown) { // Map\r\n      return get(this, key)\r\n    },\r\n    get size() { // Set Map\r\n      /**\r\n       *  当代理对象访问size属性的时候，会执行到这里，由于size是一个访问器属性\r\n       *  因此get size()中的代码都会执行，在size作用域里面 this 是 set 代理的对象，但是我们最后返回的结果是调用size()函数的结果\r\n       * \r\n       *  */\r\n      return size(this as unknown as IterableCollections)\r\n    },\r\n    has, // Set Get\r\n    add, // Set\r\n    set, // Map\r\n    delete: deleteEntry, // Set Map\r\n    forEach: createForEach(false, false)\r\n  }\r\n\r\n  const iteratorMethods = ['keys', 'values', 'entries', Symbol.iterator]\r\n\r\n  iteratorMethods.forEach(method => {\r\n    // 为 mutableInstrumentations 新增keys values entries 方法\r\n    mutableInstrumentations[method as string] = createIterableMethod(\r\n      method,\r\n      false,\r\n      false\r\n    )\r\n  })\r\n  return [\r\n    mutableInstrumentations,\r\n  ]\r\n}\r\n\r\nconst [\r\n  mutableInstrumentations,\r\n] = createInstrumentations()\r\n\r\n\r\nfunction createInstrumentationGetter(isReadonly: boolean, shallow: boolean) {\r\n  const instrumentations = mutableInstrumentations\r\n\r\n  // 这个函数是 proxy 当中的 get 函数，\r\n  return (target: CollectionTypes, key: string | symbol, receiver: CollectionTypes) => {\r\n    if (key === ReactiveFlags.IS_REACTIVE) {\r\n      return !isReadonly\r\n    } else if (key === ReactiveFlags.IS_READONLY) {\r\n      return isReadonly\r\n    } else if (key === ReactiveFlags.RAW) {\r\n      return target\r\n    }\r\n\r\n    return Reflect.get(hasOwn(instrumentations, key) && key in target ? instrumentations : target, key, receiver)\r\n  }\r\n}\r\n\r\nexport const mutableCollectionHandlers: ProxyHandler<CollectionTypes> = {\r\n  get: createInstrumentationGetter(false, false)\r\n}\r\n\r\nfunction checkIdentityKeys(\r\n  target: CollectionTypes,\r\n  has: (key: unknown) => boolean,\r\n  key: unknown\r\n) {\r\n  const rawKey = toRaw(key)\r\n  if (rawKey !== key && has.call(target, rawKey)) {\r\n    const type = toRawType(target)\r\n    console.warn(\r\n      `Reactive ${type} contains both the raw and reactive ` +\r\n      `versions of the same object${type === `Map` ? ` as keys` : ``}, ` +\r\n      `which can lead to inconsistencies. ` +\r\n      `Avoid differentiating between the raw and reactive versions ` +\r\n      `of an object and only use the reactive version if possible.`\r\n    )\r\n  }\r\n}\r\n\r\n\r\n","import { isObject, toRawType } from '@vue/shared'\r\nimport { mutableHandlers, readonlyHandlers, shallowReactiveHandlers, shallowReadonlyHandlers } from './baseHandlers'\r\nimport { mutableCollectionHandlers, } from './collectionHandlers';\r\n\r\n/**\r\n * \r\n * 这个不仅仅是为了优化，一些场景有奇效，比如 reactive([{}]).includes(arr[0]) \r\n * 由于includes内部会访问arr[0],然后和传入的arr[0]比较的时候，如果不用这个缓存，\r\n * 那么将是两个不同的代理对象,虽然这一步可以优化，但是由于 reactive([obj]) arr.includes(obj) \r\n * 会返回false的原因，不得不重写了includes，因此这里的优化在includes重新实现了\r\n * \r\n *  */\r\nexport const reactiveMap = new WeakMap<Target, any>(); // 缓存代理过的target\r\nexport const shallowReactiveMap = new WeakMap<Target, any>()\r\nexport const readonlyMap = new WeakMap<Target, any>()\r\nexport const shallowReadonlyMap = new WeakMap<Target, any>()\r\n\r\nconst enum TargetType {\r\n  INVALID = 0, // 无效的\r\n  COMMON = 1, // 正常的对象或者数组\r\n  COLLECTION = 2 // 集合\r\n}\r\n\r\nfunction targetTypeMap(rawType: string) {\r\n  switch (rawType) {\r\n    case 'Object':\r\n    case 'Array':\r\n      return TargetType.COMMON\r\n    case 'Map':\r\n    case 'Set':\r\n    case 'WeakMap':\r\n    case 'WeakSet':\r\n      return TargetType.COLLECTION\r\n    default:\r\n      return TargetType.INVALID\r\n  }\r\n}\r\n\r\n// 获取代理目标的类型\r\nfunction getTargetType(value: Target) {\r\n  return value[ReactiveFlags.SKIP] || !Object.isExtensible(value) ? TargetType.INVALID : targetTypeMap(toRawType(value))\r\n}\r\n\r\n// 工厂函数\r\nexport function createReactiveObject(\r\n  target: Target,\r\n  isReadonly: boolean,\r\n  baseHandlers: ProxyHandler<any>,\r\n  collectionHandlers: ProxyHandler<any>,\r\n  proxyMap: WeakMap<Target, any>) {\r\n\r\n  // 判断传入的数据是否为对象\r\n  if (!isObject(target)) {\r\n    // __DEV__用于判断当前的代码编写环境为开发环境的时候，发出警告，因此在生产环境下这段代码为dead code，利用tree-shaking(依赖于ES Module)移除掉\r\n    if ('__DEV__') {\r\n      console.warn(`value cannot be made reactive: ${String(target)}`)\r\n    }\r\n    return target\r\n  }\r\n\r\n  // 判断target是否被代理过，如果target是一个响应式对象，这里会触发getter(主要针对于target是一个响应式对象，如果target是原始对象不会触发getter，只有响应式对象才会触发getter)\r\n  // && 后面的 判断用于 readonly(reactive(obj)) 这样的情况\r\n  if (target[ReactiveFlags.RAW] && !(isReadonly && target[ReactiveFlags.IS_REACTIVE])) {\r\n    // console.log(isReadonly);\r\n    // console.log(target[ReactiveFlags.IS_REACTIVE]);\r\n    return target\r\n  }\r\n\r\n  // 优先通过原始对象 obj 寻找之前创建的代理对象，如果找到了，直接返回已有的代理对象，简单的说就是代理过的对象不再重复代理，取出之前创建的代理对象返回\r\n  const existionProxy = proxyMap.get(target)\r\n  if (existionProxy) {\r\n    return existionProxy\r\n  }\r\n\r\n  // 在这里需要对传入的target进行一个判断，因为set，map的处理方式和普通的对象或者数组不一样\r\n  const targetType = getTargetType(target)\r\n  // 如果是个无效的target，直接返回\r\n  if (targetType === TargetType.INVALID) {\r\n    return target\r\n  }\r\n\r\n  const proxy = new Proxy(\r\n    target,\r\n    // 根据不同的target类型，选择不同的handlers，因为集合的处理方式和普通对象或者数组不一样\r\n    targetType === TargetType.COLLECTION ? collectionHandlers : baseHandlers\r\n  ) // 数据劫持\r\n\r\n  proxyMap.set(target, proxy) // 缓存\r\n  return proxy // 返回代理\r\n}\r\n\r\nexport declare const ShallowReactiveMarker: unique symbol\r\nexport type ShallowReactive<T> = T & { [ShallowReactiveMarker]?: true }\r\nexport function shallowReactive<T extends object>(target: T): ShallowReactive<T> {\r\n  return createReactiveObject(\r\n    target,\r\n    false,\r\n    shallowReactiveHandlers,\r\n    mutableCollectionHandlers,\r\n    shallowReactiveMap\r\n  )\r\n}\r\n\r\nexport function reactive(target: object) {\r\n  return createReactiveObject(\r\n    target,\r\n    false,\r\n    mutableHandlers,\r\n    mutableCollectionHandlers,\r\n    reactiveMap\r\n  )\r\n}\r\n\r\nexport function readonly<T extends object>(target: T) {\r\n  return createReactiveObject(\r\n    target,\r\n    true,\r\n    readonlyHandlers,\r\n    mutableCollectionHandlers,\r\n    readonlyMap\r\n  )\r\n}\r\n\r\nexport function shallowReadonly<T extends object>(target: T): Readonly<T> {\r\n  return createReactiveObject(\r\n    target,\r\n    true,\r\n    shallowReadonlyHandlers,\r\n    mutableCollectionHandlers,\r\n    shallowReadonlyMap\r\n  )\r\n}\r\n\r\nexport interface Target {\r\n  [ReactiveFlags.SKIP]?: boolean\r\n  [ReactiveFlags.IS_REACTIVE]?: boolean\r\n  [ReactiveFlags.IS_READONLY]?: boolean\r\n  [ReactiveFlags.IS_SHALLOW]?: boolean\r\n  [ReactiveFlags.RAW]?: any\r\n}\r\n\r\nexport const enum ReactiveFlags {\r\n  SKIP = '__v_skip',\r\n  IS_REACTIVE = '__v_isReactive', // 一个对象已经被代理过的标志\r\n  IS_READONLY = '__v_isReadonly',\r\n  IS_SHALLOW = '__v_isShallow',\r\n  RAW = '__v_raw'\r\n}\r\n\r\nexport function toRaw<T>(observed: T): T {\r\n  // 如果传入的对象是一个响应式对象,例如reactive代理的响应式对象,可以访问该代理对象的'__v_raw'属性,这个属性会返回代理对象的原始对象\r\n  const raw = observed && (observed as Target)[ReactiveFlags.RAW]\r\n  // 如果这里获取到了原始对象,但是这个原始对象还可能是一个响应式对象,因此需要递归的去调用toRaw方法去获取原始对象,直到真正的获取到了原始对象\r\n  return raw ? toRaw(raw) : observed\r\n}\r\n\r\nexport const toReactive = <T extends unknown>(value: T): T =>\r\n  // 判断传入的原始数据是否为对象类型\r\n  // 如果传入的原始数据是对象类型,那么调用reactive去进行代理,这里reactive内部其实也是进行了相关的优化,如果一个原始值已经是被代理过的,那么会直接返回已经代理的对象,就不用重新去代理了\r\n  // 如果传入的原始数据不是对象类型,那么直接返回该数据\r\n  isObject(value) ? reactive(value as object) : value\r\n\r\n\r\n  export const toReadonly = <T extends unknown>(value: T): T =>\r\n  isObject(value) ? readonly(value as Record<any, any>) : value\r\n","import { isFunction, NOOP } from \"@vue/shared\"\r\nimport { Dep } from './dep'\r\nimport { isTracking, ReactiveEffect, trackEffects, triggerEffects } from './effect'\r\nimport { ReactiveFlags, toRaw } from \"./reactive\"\r\n\r\n/**\r\n * state.age 收集computed的副作用函数\r\n * \r\n * Myage.value 相当于计算属性收集最外层 effect\r\n * \r\n */\r\n// const Myage = computed(() => {\r\n//   return state.age + 19;\r\n// });\r\n// effect(() => {\r\n//   console.log(Myage.value); // 这样做的话相当于是个嵌套的effect,state.age收集了传给computed的副作用函数\r\n// });\r\n// // 需要通过.value 才执行\r\n// setTimeout(() => {\r\n//   state.age = 20;\r\n// }, 2000);\r\n\r\nexport type ComputedGetter<T> = (...args: any[]) => T\r\nexport type ComputedSetter<T> = (v: T) => void\r\n\r\nexport interface WritableComputedOptions<T> {\r\n  get: ComputedGetter<T>\r\n  set: ComputedSetter<T>\r\n}\r\n\r\nexport class ComputedRefImpl<T> {\r\n  public dep?: Dep = undefined\r\n  private _value!: T\r\n  public readonly effect: ReactiveEffect<T> // 计算属性依赖于effect\r\n  public readonly __v_isRef = true\r\n  public _dirty = true  // 默认脏的\r\n  public readonly [ReactiveFlags.IS_READONLY]: boolean = false\r\n\r\n  constructor(\r\n    getter: ComputedGetter<T>,\r\n    private readonly _setter: ComputedSetter<T>,\r\n    isReadonly?: boolean,\r\n  ) {\r\n    // 这里将计算属性包成一个effect , getter相当于effect当中的副作用函数\r\n    this.effect = new ReactiveEffect(getter, () => {\r\n      // 稍后计算属性的值发生变化了,不要重新执行getter,而是走第二个函数\r\n      if (!this._dirty) {\r\n        this._dirty = true\r\n        // 重新执行最外层的effect\r\n        triggerEffects(this.dep)\r\n      }\r\n    })\r\n    this[ReactiveFlags.IS_READONLY] = isReadonly\r\n  }\r\n\r\n  // 取值时, 编译完就是Object.defineProperty\r\n  get value() {\r\n    if (isTracking()) { //是否是在effect中取值的\r\n      trackEffects(this.dep || (this.dep = new Set<ReactiveEffect>)) // 将外层的effect收集,相当于收集 computed.value -> Set(effect)\r\n    }\r\n\r\n    if (this._dirty) {\r\n      // 缓存结果 \r\n      this._dirty = false\r\n      this._value = this.effect.run()\r\n    }\r\n    return this._value\r\n  }\r\n\r\n  set value(newValue: T) {\r\n    this._setter(newValue) // 如果修改计算属性的值就走setter\r\n  }\r\n}\r\n\r\nexport function computed<T>(getterOrOptions: ComputedGetter<T> | WritableComputedOptions<T>) {\r\n  // 判断传入的值是函数还是配置对象{get,set}\r\n  const onlyGetter = isFunction(getterOrOptions)\r\n\r\n  let getter: ComputedGetter<T>\r\n  let setter: ComputedSetter<T>\r\n\r\n  if (onlyGetter) {\r\n    getter = getterOrOptions\r\n    setter = false // __DEV__\r\n      ? () => {\r\n        console.warn('Write operation failed: computed value is readonly')\r\n      }\r\n      : NOOP\r\n  } else {\r\n    getter = getterOrOptions.get\r\n    setter = getterOrOptions.set\r\n  }\r\n\r\n  return new ComputedRefImpl(getter, setter)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import { Dep } from './dep'\r\nimport { isObject } from '@vue/shared'\r\nimport { reactive, toRaw, toReactive } from './reactive'\r\nimport { isTracking, trackEffects } from './effect'\r\n\r\n// ref入口函数\r\nexport function ref(value?: unknown) {\r\n  // 内部调用 createRef 函数，尾调用优化\r\n  return createRef(value, false)\r\n}\r\n\r\n// 真正创建 ref 实例的构造韩素华\r\nfunction createRef(rawValue: unknown, shallow: boolean) {\r\n  // 判断传入的值是否为ref的实例，如果是直接返回\r\n  if (isRef(rawValue)) {\r\n    return rawValue\r\n  }\r\n\r\n  // 如果不是，调用RefImpl构造函数，即创建ref实例 ， value,false\r\n  return new RefImpl(rawValue, shallow)\r\n}\r\n\r\n// ref\r\nclass RefImpl<T> {\r\n  private _value: T\r\n  private _rawValue: T\r\n\r\n  public dep?: Dep = undefined\r\n\r\n  // 判断当前的实例是否为Ref对象\r\n  public readonly __v_isRef = true\r\n\r\n  // 这里ref 的 __v_isShallow 为false，用于判断是不是浅层次的响应式,即判断调用的函数时shallowRef 还是 ref\r\n  constructor(value: T, public readonly __v_isShallow: boolean) {\r\n\r\n    // 这里传入的值可能是一个reactive代理的响应式对象，因此通过toRaw方法，返回reactive代理的原始对象\r\n    this._rawValue = __v_isShallow ? value : toRaw(value) // 访问value['__v_raw]获取到原始对象并进行保存\r\n\r\n    // 对原始数据进行代理\r\n    this._value = __v_isShallow ? value : toReactive(value)\r\n\r\n    /**\r\n     *  执行到这里的时候,ref的实例已经是创建完成\r\n     *    让我们回顾整个创建的过程\r\n     *      1.首先我们是获取了传入的数据的原始数据\r\n     *      2.判断原始数据的数据类型是否为对象类型,如果是对象调用 reactive 进行代理,反之返回原始数据\r\n     *      3.将最终处理的数据保存在 _value 当中,基本数据类型就是基本数据类型,引用类型就通过 reactive 代理\r\n     */\r\n  }\r\n\r\n  /**\r\n   * 通过ref实例.value 获取到 _value 的值，_value值的类型根据 toReactive()的返回结果决定，\r\n   * 如果不是对象就是原始值。如果是对象，返回的是通过 reactive() 包装后的对象，也就是通过 Proxy() 代理的\r\n   */\r\n  get value() {\r\n    // 取值的时候依赖收集\r\n    if (isTracking()) {\r\n      trackEffects(this.dep || (this.dep = new Set()))\r\n    }\r\n    return this._value\r\n  }\r\n\r\n  // 在这里，无论是ref还是shallowRef的实例对象，都是同样的方式进行存储\r\n  set value(newVal) {\r\n    // 设置值的时候触发更新\r\n    if (newVal !== this._rawValue) {0\r\n      this._rawValue = newVal\r\n      this._value = toReactive(newVal)\r\n      trackEffects(this.dep)\r\n    }\r\n  }\r\n}\r\n\r\nexport function shallowRef<T extends object>(value: T): T extends Ref ? T : ShallowRef<T>\r\nexport function shallowRef<T>(value: T): ShallowRef<T>\r\nexport function shallowRef<T = any>(): ShallowRef<T | undefined>\r\nexport function shallowRef(value?: unknown) {\r\n  return createRef(value, true)\r\n}\r\n\r\ndeclare const RefSymbol: unique symbol\r\nexport interface Ref<T = any> {\r\n  value: T\r\n  [RefSymbol]: true\r\n}\r\n\r\nexport function isRef<T>(r: Ref<T> | unknown): r is Ref<T>\r\n\r\n// 如果传入ref的对象，已经是 ref 的实例\r\nexport function isRef(r: any): r is Ref {\r\n  return !!(r && r.__v_isRef === true)\r\n}\r\n\r\ndeclare const ShallowRefMarker: unique symbol\r\nexport type ShallowRef<T = any> = Ref<T> & { [ShallowRefMarker]?: true }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["has","get","set"],"mappings":"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"}